}
Total_Increase = In_Irr_Water + In_Irr_Splash + In_Rain_Splash
Contamination  = Contamination  + Total_Increase #CFU/g
if (i>1 | i<IR_Days){
Contamination = F_DieoffProduce_Allende2018 (ContIn =Contamination ) #CFU/g
}
}
#Vector for Inputs
## General
IR_Days_V[j]<-IR_Days
IR_RainyDays_V[j]<-IR_RainyDays
IR_SunHoursDay_V[j]<-IR_SunHoursDay
IS_Dieoff_Coeff_V[j]<-IS_Dieoff_Coeff
## Water Qual
IR_Pr_EcoliIrrWater_V[j]<-IR_Pr_EcoliIrrWater
IR_ContIrrWater_V[j]<-IR_ContIrrWater
## Soil Qual
IR_ContSoil_V[j]<-IR_ContSoil
## Irrigation
IR_TransIrrWater_V[j]<-IR_TransIrrWater
IR_Pr_IrrigationSplash_v[j]<-IR_Pr_IrrigationSplash
## Rain
IR_Pr_RainSplash_V[j]<-IR_Pr_RainSplash
## Rain and Irrigation
IR_TransSoil_V[j]<-IR_TransSoil
IR_Pr_EcoliSoiltoPlant_V[j]<-IR_Pr_EcoliSoiltoPlant
#Output
Contamination_V[j]<-Contamination
#Detection Rate for Sampling
Sampling_Detection_Rate = (sum(Sampling_Results)/length(Sampling_Results))
}
### Sensitivity Analysis
Output_df<-data.frame(IR_Days_V,IR_RainyDays_V,IR_SunHoursDay_V,
IS_Dieoff_Coeff_V,IR_Pr_EcoliIrrWater_V,
IR_ContIrrWater_V,IR_ContSoil_V,IR_TransIrrWater_V,
IR_Pr_IrrigationSplash_v,IR_Pr_RainSplash_V,
IR_TransSoil_V,IR_Pr_EcoliSoiltoPlant_V,
Contamination_V)
library(sensitivity)
library(ggplot2)
Pcc<-pcc(Output_df[,1:12], Output_df$Contamination_V, nboot = 100, conf = T)
Pcc_df<-Pcc$PCC
Pcc_df$Names<-rownames(Pcc_df)
Pcc_df %>%
ggplot(aes(x=fct_reorder(Names, abs(original)), y = original))+
labs(y = "Partial Rank Correlation Coefficient", x = "Input Name", title = "Sensitivity: Final Contamination Levels")+
coord_flip()+
geom_col(fill= "skyblue", color= "black")+
theme_bw()
##INPUTS ###
#Vector for Inputs
## General
IR_Days_V<- c()
IR_RainyDays_V<-c()
IR_SunHoursDay_V<-c()
IS_Dieoff_Coeff_V<-c()
## Water Quality
IR_Pr_EcoliIrrWater_V<-c()
IR_ContIrrWater_V<-c()
## Soil Quality
IR_ContSoil_V<-c()
## Irrigation
IR_TransIrrWater_V<-c()
IR_Pr_IrrigationSplash_v<-c()
## Rain
IR_Pr_RainSplash_V<-c()
## Rain and Irrigation
IR_TransSoil_V<-c()
IR_Pr_EcoliSoiltoPlant_V<-c()
#Output
Contamination_V<-c()
for (j in 1:1000){
#Selecting Season
IS_Seasons = c("Spring", "Winter", "Summer")
IR_SeasonSelected = sample(IS_Seasons, 1)
####General Season Inputs
##Spring
if (IR_SeasonSelected == "Spring"){
##Growing Time in Spring
IR_Days = round(rpert(1, 32.0, 36.8, 43.0),0)
#Rainy Days in Spring
IR_RainyDays = rpert(1, 1, 5.6, 14)
#Sun hours per day
IR_SunHoursDay =  rpert(1, 5, 10.4, 12)
#Allende Die off Coefficient
IS_Dieoff_Coeff<-(-0.52)
}
##Winter
if (IR_SeasonSelected == "Winter"){
##Growing Time in Winter
IR_Days = round(rpert(1, 51.0, 56.7, 67.0),0)
#Rainy Days in Winter
IR_RainyDays = rpert(1, 3, 10.6, 23)
#Sun hours per day
IR_SunHoursDay =  rpert(1, 6, 8.5, 11)
#Allende Die off Coefficient
IS_Dieoff_Coeff<-(-0.48)
}
##Summer
if (IR_SeasonSelected == "Summer"){
## Growing Time in Summer
IR_Days = round(rpert(1, 35, 40, 45),0)
#Rainy Days in Summer
IR_RainyDays = rpert(1, 1, 6, 11)
#Sun hours per day ******MADE UP*******
IR_SunHoursDay =  rpert(1, 7, 11, 13)
#Allende Die off Coefficient
IS_Dieoff_Coeff<-(-0.52)
}
##Probability of a Sunny Day
IC_Pr_SunnyDay = 1-IR_RainyDays/IR_Days
### Water Quality Inputs
##Probability of irrigation water being contaminated
IR_Pr_EcoliIrrWater = 0.95
## Contamination in irrigation water
IR_ContIrrWater = (10^(rnorm(1,1.270, 0.567)))/100 #CFU/mL
### Soil Quality Inputs
##E coli levels in soil
IR_ContSoil = rnorm(1,0.549,0.816)
### Irrigation Inputs
## mL of water per gram of lettuce
IR_TransIrrWater = runif(1, 1.8, 21.6) #mL/g
##Probability of irrigation splashing
IR_Pr_IrrigationSplash<- rpert(1, 0.02, 0.04, 0.06)
### Rain Inputs
##Probability of rain splashing
IR_Pr_RainSplash<- rpert(1, 0.02, 0.04, 0.06)
### Rain and Irrigation Splashing
#Soil transferred by irrigation or by rain splash
IR_TransSoil = rbetagen(1, 0.4, 0.8, 0.05, 16.4) #g soil/g lettuce
#Probability of bacteria transferred from soil to plant
IR_Pr_EcoliSoiltoPlant = runif(1, 0.35, 0.9)
### Intervention INPUTS ####
### Sampling Inputs
IS_PHSampling_Mass = 1500
IS_PHSampling_N = 60
Sampling_Days = c(1, IR_Days%/%2, IR_Days-2)
Contamination = 0 #CFU/g
Sampling_Results<-c()
for (i in 1:IR_Days){
#Decisions
## Is it sunny
IC_Is_Sunny = rbinom(1, 1, IC_Pr_SunnyDay)
## Is the irrigation water contamination
IC_Is_IrrWaterCont = rbinom(1, 1,IR_Pr_EcoliIrrWater)
## Does irrigation splash occur?
IC_Is_IrrigationSplash = rbinom(1, 1,IR_Pr_IrrigationSplash)
## Does Rain splash occur?
IC_Is_RainSplash = rbinom(1, 1,IR_Pr_RainSplash)
if(i %in% Sampling_Days){
Sampling_Results[length(Sampling_Results)+1]<-F_Sampling(ContIn = Contamination)
}
if(IC_Is_Sunny == 1){
#Increase due to Irrigation water
In_Irr_Water = (IR_ContIrrWater* IR_TransIrrWater*IC_Is_IrrWaterCont)
#Increase due to Irrigation water splash
In_Irr_Splash = ((10^IR_ContSoil)*IR_TransSoil*IR_Pr_EcoliSoiltoPlant*IC_Is_IrrigationSplash)
In_Rain_Splash = 0
} else {
In_Irr_Water =0
In_Irr_Splash = 0
#Increase due to rain splash
In_Rain_Splash = round (10^(IR_ContSoil)*IR_TransSoil*IR_Pr_EcoliSoiltoPlant*IC_Is_RainSplash)
}
Total_Increase = In_Irr_Water + In_Irr_Splash + In_Rain_Splash
Contamination  = Contamination  + Total_Increase #CFU/g
if (i>1 | i<IR_Days){
Contamination = F_DieoffProduce_Allende2018 (ContIn =Contamination ) #CFU/g
}
}
#Vector for Inputs
## General
IR_Days_V[j]<-IR_Days
IR_RainyDays_V[j]<-IR_RainyDays
IR_SunHoursDay_V[j]<-IR_SunHoursDay
IS_Dieoff_Coeff_V[j]<-IS_Dieoff_Coeff
## Water Qual
IR_Pr_EcoliIrrWater_V[j]<-IR_Pr_EcoliIrrWater
IR_ContIrrWater_V[j]<-IR_ContIrrWater
## Soil Qual
IR_ContSoil_V[j]<-IR_ContSoil
## Irrigation
IR_TransIrrWater_V[j]<-IR_TransIrrWater
IR_Pr_IrrigationSplash_v[j]<-IR_Pr_IrrigationSplash
## Rain
IR_Pr_RainSplash_V[j]<-IR_Pr_RainSplash
## Rain and Irrigation
IR_TransSoil_V[j]<-IR_TransSoil
IR_Pr_EcoliSoiltoPlant_V[j]<-IR_Pr_EcoliSoiltoPlant
#Output
Contamination_V[j]<-Contamination
#Detection Rate for Sampling
Sampling_Detection_Rate = (sum(Sampling_Results)/length(Sampling_Results))
}
### Sensitivity Analysis
Output_df<-data.frame(IR_Days_V,IR_RainyDays_V,IR_SunHoursDay_V,
IS_Dieoff_Coeff_V,IR_Pr_EcoliIrrWater_V,
IR_ContIrrWater_V,IR_ContSoil_V,IR_TransIrrWater_V,
IR_Pr_IrrigationSplash_v,IR_Pr_RainSplash_V,
IR_TransSoil_V,IR_Pr_EcoliSoiltoPlant_V,
Contamination_V)
library(sensitivity)
library(ggplot2)
Pcc<-pcc(Output_df[,1:12], Output_df$Contamination_V, nboot = 100, conf = T)
Pcc_df<-Pcc$PCC
Pcc_df$Names<-rownames(Pcc_df)
Pcc_df %>%
ggplot(aes(x=fct_reorder(Names, abs(original)), y = original))+
labs(y = "Partial Rank Correlation Coefficient", x = "Input Name", title = "Sensitivity: Final Contamination Levels")+
coord_flip()+
geom_col(fill= "skyblue", color= "black")+
theme_bw()
IR_RainyDays_V<-c()
IR_SunHoursDay_V<-c()
IS_Dieoff_Coeff_V<-c()
## Water Quality
IR_Pr_EcoliIrrWater_V<-c()
IR_ContIrrWater_V<-c()
## Soil Quality
IR_ContSoil_V<-c()
## Irrigation
IR_TransIrrWater_V<-c()
IR_Pr_IrrigationSplash_v<-c()
## Rain
IR_Pr_RainSplash_V<-c()
## Rain and Irrigation
IR_TransSoil_V<-c()
IR_Pr_EcoliSoiltoPlant_V<-c()
#Output
Contamination_V<-c()
for (j in 1:10000){
#Selecting Season
IS_Seasons = c("Spring", "Winter", "Summer")
IR_SeasonSelected = sample(IS_Seasons, 1)
####General Season Inputs
##Spring
if (IR_SeasonSelected == "Spring"){
##Growing Time in Spring
IR_Days = round(rpert(1, 32.0, 36.8, 43.0),0)
#Rainy Days in Spring
IR_RainyDays = rpert(1, 1, 5.6, 14)
#Sun hours per day
IR_SunHoursDay =  rpert(1, 5, 10.4, 12)
#Allende Die off Coefficient
IS_Dieoff_Coeff<-(-0.52)
}
##Winter
if (IR_SeasonSelected == "Winter"){
##Growing Time in Winter
IR_Days = round(rpert(1, 51.0, 56.7, 67.0),0)
#Rainy Days in Winter
IR_RainyDays = rpert(1, 3, 10.6, 23)
#Sun hours per day
IR_SunHoursDay =  rpert(1, 6, 8.5, 11)
#Allende Die off Coefficient
IS_Dieoff_Coeff<-(-0.48)
}
##Summer
if (IR_SeasonSelected == "Summer"){
## Growing Time in Summer
IR_Days = round(rpert(1, 35, 40, 45),0)
#Rainy Days in Summer
IR_RainyDays = rpert(1, 1, 6, 11)
#Sun hours per day ******MADE UP*******
IR_SunHoursDay =  rpert(1, 7, 11, 13)
#Allende Die off Coefficient
IS_Dieoff_Coeff<-(-0.52)
}
##Probability of a Sunny Day
IC_Pr_SunnyDay = 1-IR_RainyDays/IR_Days
### Water Quality Inputs
##Probability of irrigation water being contaminated
IR_Pr_EcoliIrrWater = 0.95
## Contamination in irrigation water
IR_ContIrrWater = (10^(rnorm(1,1.270, 0.567)))/100 #CFU/mL
### Soil Quality Inputs
##E coli levels in soil
IR_ContSoil = rnorm(1,0.549,0.816)
### Irrigation Inputs
## mL of water per gram of lettuce
IR_TransIrrWater = runif(1, 1.8, 21.6) #mL/g
##Probability of irrigation splashing
IR_Pr_IrrigationSplash<- rpert(1, 0.02, 0.04, 0.06)
### Rain Inputs
##Probability of rain splashing
IR_Pr_RainSplash<- rpert(1, 0.02, 0.04, 0.06)
### Rain and Irrigation Splashing
#Soil transferred by irrigation or by rain splash
IR_TransSoil = rbetagen(1, 0.4, 0.8, 0.05, 16.4) #g soil/g lettuce
#Probability of bacteria transferred from soil to plant
IR_Pr_EcoliSoiltoPlant = runif(1, 0.35, 0.9)
### Intervention INPUTS ####
### Sampling Inputs
IS_PHSampling_Mass = 1500
IS_PHSampling_N = 60
Sampling_Days = c(1, IR_Days%/%2, IR_Days-2)
Contamination = 0 #CFU/g
Sampling_Results<-c()
for (i in 1:IR_Days){
#Decisions
## Is it sunny
IC_Is_Sunny = rbinom(1, 1, IC_Pr_SunnyDay)
## Is the irrigation water contamination
IC_Is_IrrWaterCont = rbinom(1, 1,IR_Pr_EcoliIrrWater)
## Does irrigation splash occur?
IC_Is_IrrigationSplash = rbinom(1, 1,IR_Pr_IrrigationSplash)
## Does Rain splash occur?
IC_Is_RainSplash = rbinom(1, 1,IR_Pr_RainSplash)
if(i %in% Sampling_Days){
Sampling_Results[length(Sampling_Results)+1]<-F_Sampling(ContIn = Contamination)
}
if(IC_Is_Sunny == 1){
#Increase due to Irrigation water
In_Irr_Water = (IR_ContIrrWater* IR_TransIrrWater*IC_Is_IrrWaterCont)
#Increase due to Irrigation water splash
In_Irr_Splash = ((10^IR_ContSoil)*IR_TransSoil*IR_Pr_EcoliSoiltoPlant*IC_Is_IrrigationSplash)
In_Rain_Splash = 0
} else {
In_Irr_Water =0
In_Irr_Splash = 0
#Increase due to rain splash
In_Rain_Splash = round (10^(IR_ContSoil)*IR_TransSoil*IR_Pr_EcoliSoiltoPlant*IC_Is_RainSplash)
}
Total_Increase = In_Irr_Water + In_Irr_Splash + In_Rain_Splash
Contamination  = Contamination  + Total_Increase #CFU/g
if (i>1 | i<IR_Days){
Contamination = F_DieoffProduce_Allende2018 (ContIn =Contamination ) #CFU/g
}
}
#Vector for Inputs
## General
IR_Days_V[j]<-IR_Days
IR_RainyDays_V[j]<-IR_RainyDays
IR_SunHoursDay_V[j]<-IR_SunHoursDay
IS_Dieoff_Coeff_V[j]<-IS_Dieoff_Coeff
## Water Qual
IR_Pr_EcoliIrrWater_V[j]<-IR_Pr_EcoliIrrWater
IR_ContIrrWater_V[j]<-IR_ContIrrWater
## Soil Qual
IR_ContSoil_V[j]<-IR_ContSoil
## Irrigation
IR_TransIrrWater_V[j]<-IR_TransIrrWater
IR_Pr_IrrigationSplash_v[j]<-IR_Pr_IrrigationSplash
## Rain
IR_Pr_RainSplash_V[j]<-IR_Pr_RainSplash
## Rain and Irrigation
IR_TransSoil_V[j]<-IR_TransSoil
IR_Pr_EcoliSoiltoPlant_V[j]<-IR_Pr_EcoliSoiltoPlant
#Output
Contamination_V[j]<-Contamination
#Detection Rate for Sampling
Sampling_Detection_Rate = (sum(Sampling_Results)/length(Sampling_Results))
}
### Sensitivity Analysis
Output_df<-data.frame(IR_Days_V,IR_RainyDays_V,IR_SunHoursDay_V,
IS_Dieoff_Coeff_V,IR_Pr_EcoliIrrWater_V,
IR_ContIrrWater_V,IR_ContSoil_V,IR_TransIrrWater_V,
IR_Pr_IrrigationSplash_v,IR_Pr_RainSplash_V,
IR_TransSoil_V,IR_Pr_EcoliSoiltoPlant_V,
Contamination_V)
library(sensitivity)
library(ggplot2)
Pcc<-pcc(Output_df[,1:12], Output_df$Contamination_V, nboot = 100, conf = T)
Pcc_df<-Pcc$PCC
Pcc_df$Names<-rownames(Pcc_df)
Pcc_df %>%
ggplot(aes(x=fct_reorder(Names, abs(original)), y = original))+
labs(y = "Partial Rank Correlation Coefficient", x = "Input Name", title = "Sensitivity: Final Contamination Levels")+
coord_flip()+
geom_col(fill= "skyblue", color= "black")+
theme_bw()
knitr::opts_chunk$set(echo = TRUE)
BS3 <- read.csv(file = "Baseline3-Supplemental.csv", header = TRUE )
setwd("~/GitHub/CPS-Farm-To-Facility-Cilantro")
BS3 <- read.csv(file = "Baseline3-Supplemental.csv", header = TRUE )
setwd("~/GitHub/CPS-Farm-To-Facility-Cilantro")
BS3 <- read.csv(file = "Data/Baseline3-Supplemental.csv", header = TRUE )
Order<-(BS3$Scenarios2[1:15])
BS3$Scenarios <- as.factor(BS3$Scenarios)
BS3$Scenarios2 <- as.factor(BS3$Scenarios2)
BS3$Relative_Efficacy <-as.numeric(BS3$Detection_Rate)
BS3
Fig2 <- ggplot(BS3, aes(x=factor(Scenarios2, levels = rev(Order)), y=Relative_Efficacy,fill = Test_Type)) +
geom_bar(position = "dodge", stat = "identity") +
labs(title="Water is always contaminated, irrigation 4 times per season\n total 6 inches irrigated in 5,000 lb acre", y="Overall Detection Rate", x="Sampling Scenario")+
scale_fill_discrete(name = "Contamination \nLevel")+#(values=c("#FF3366","#99CCFF")) +
#scale_y_continuous(labels = scales::percent)+
theme_bw()+
theme(plot.title = element_text(hjust = 0.5))+
#theme(axis.text.x = element_text(angle=45, vjust=1, hjust=1))+
coord_flip()+
theme(axis.text.x=element_text(size =12), axis.text.y=element_text(size =12),axis.title = element_text(size = 12))+
scale_fill_manual(name = "Test Type:", values = c("Produce" = "darkgreen", "Water" = "darkblue", "Both" = "steelblue"))+
#theme(legend.position=c(0.75, 0.70))+
facet_grid(~Contamination)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(scales)
library(reshape2)
library(tidyverse)
library(ggnewscale)
BS3 <- read.csv(file = "Data/Baseline3-Supplemental.csv", header = TRUE )
Order<-(BS3$Scenarios2[1:15])
BS3$Scenarios <- as.factor(BS3$Scenarios)
BS3$Scenarios2 <- as.factor(BS3$Scenarios2)
BS3$Relative_Efficacy <-as.numeric(BS3$Detection_Rate)
BS3
Fig2 <- ggplot(BS3, aes(x=factor(Scenarios2, levels = rev(Order)), y=Relative_Efficacy,fill = Test_Type)) +
geom_bar(position = "dodge", stat = "identity") +
labs(title="Water is always contaminated, irrigation 4 times per season\n total 6 inches irrigated in 5,000 lb acre", y="Overall Detection Rate", x="Sampling Scenario")+
scale_fill_discrete(name = "Contamination \nLevel")+#(values=c("#FF3366","#99CCFF")) +
#scale_y_continuous(labels = scales::percent)+
theme_bw()+
theme(plot.title = element_text(hjust = 0.5))+
#theme(axis.text.x = element_text(angle=45, vjust=1, hjust=1))+
coord_flip()+
theme(axis.text.x=element_text(size =12), axis.text.y=element_text(size =12),axis.title = element_text(size = 12))+
scale_fill_manual(name = "Test Type:", values = c("Produce" = "darkgreen", "Water" = "darkblue", "Both" = "steelblue"))+
#theme(legend.position=c(0.75, 0.70))+
facet_grid(~Contamination)
Fig2
BS4 <- read.csv(file = "Data/Baseline4-Supplemental.csv", header = TRUE )
Order<-(BS4$Scenarios2[1:15])
BS4$Scenarios <- as.factor(BS4$Scenarios)
BS4$Scenarios2 <- as.factor(BS4$Scenarios2)
BS4$Relative_Efficacy <-as.numeric(BS4$Detection_Rate)
BS4
Fig2 <- ggplot(BS4, aes(x=factor(Scenarios2, levels = rev(Order)), y=Relative_Efficacy,fill = Test_Type)) +
geom_bar(position = "dodge", stat = "identity") +
labs(title="Water is always contaminated, irrigation 4 times per season\n total 6 inches irrigated in 5,000 lb acre", y="Overall Detection Rate", x="Sampling Scenario")+
scale_fill_discrete(name = "Contamination \nLevel")+#(values=c("#FF3366","#99CCFF")) +
#scale_y_continuous(labels = scales::percent)+
theme_bw()+
theme(plot.title = element_text(hjust = 0.5))+
#theme(axis.text.x = element_text(angle=45, vjust=1, hjust=1))+
coord_flip()+
theme(axis.text.x=element_text(size =12), axis.text.y=element_text(size =12),axis.title = element_text(size = 12))+
scale_fill_manual(name = "Test Type:", values = c("Produce" = "darkgreen", "Water" = "darkblue", "Both" = "steelblue"))+
#theme(legend.position=c(0.75, 0.70))+
facet_grid(~Contamination)
Fig2
Baseline_Binded<-rbind(BS3, BS4)
Baseline_Binded %>%
ggplot(aes(y= factor(Scenarios2, levels = rev(Order)), x = Detection_Rate, fill = Test_Type, alpha = Contamination))+
geom_col(color= "black")+
facet_grid(Type~Contamination, labeller = as_labeller(c("Daily Contamination " = "Daily Contamination" ,
"Random Contamination - Once" = "Random Contamintion\n Once per growing cycle",
"High" = "Contamination-High",
"Low" = "Contamination - Low")))+
theme_bw()+
theme(legend.position="bottom")+
scale_fill_discrete(name = "Test Type")+
scale_alpha_discrete(range = c(1, 0.8), )+
scale_fill_hue()+
scale_fill_manual(name = "Test Type:", values = c("Produce" = "darkgreen", "Water" = "darkblue", "Both" = "steelblue"))+
labs(title="Unintentional irrigation with contaminated water\n 5k lb yield, irrigation 4 times per season\n for total of 6 inches", x="Overall Detection Rate", y="Sampling Scenario")+
guides(alpha = FALSE)
ggsave("Suplemental Combined-Updated.jpg", width =7, height = 6, units = "in", dpi = 300)
Unc_Conts<-read_csv("Data/Water_Testing_Analysis_R4.csv")
setwd("~/GitHub/CPS-Farm-To-Facility-Cilantro")
library(tidyverse)
library(reshape2)
library(readr)
Unc_Conts<-read_csv("Data/Water_Testing_Analysis_R4.csv")
Unc_Conts<-Unc_Conts %>%
select(-...1) %>%
mutate(N10Lsamples= as.factor(N10Lsamples)) %>%
group_by(N10Lsamples, Conts) %>%
summarise(median = median(PDetect), q05 = quantile(PDetect, 0.05), q95 = quantile(PDetect, 0.95))
View(Unc_Conts)
Unc_Conts<-read_csv("Data/Product_Testing_Analysis_R4.csv")
Unc_Conts<-Unc_Conts %>%
mutate(Conts = Conts/(454*22000)) %>%
select(-...1) %>%
mutate(N25gsamples= as.factor(N25gsamples)) %>%
group_by(N25gsamples, Conts) %>%
summarise(median = median(PDetect), q05 = quantile(PDetect, 0.05), q95 = quantile(PDetect, 0.95))
knitr::opts_chunk$set(echo = TRUE)
H_DPT<-read.csv(file = "Detection_Rates_High_DPT_LOC.csv")
#together:
H_DPT<-read.csv(file = "Data/Detection_Rates_High_DPT_LOC.csv")
H_DPT<-read.csv(file = "Data/Detection_Rates_High_DPT_LOC.csv")
H_DPT$Level = "Contamination - High"
H_DPT$Type = "Produce Testing - Daily"
H_FPT<-read.csv(file = "Data/Detection_Rates_High_FPT_LOC.csv")
H_FPT$Level = "Contamination - High"
H_FPT$Type = "Produce Testing 1 sample - End"
H_FPT_10s<-read.csv(file = "Data/Detection_Rates_High_10s_FPT_LOC.csv")
H_FPT_10s$Level = "Contamination - High"
H_FPT_10s$Type = "Produce Testing 10 samples - End"
H_FPT_45s<-read.csv(file = "Data/Detection_Rates_High_45s_FPT_LOC.csv")
H_FPT_45s$Level = "Contamination - High"
H_FPT_45s$Type = "Produce Testing 45 samples - End"
L_DPT<-read.csv(file = "Data/Detection_Rates_Low_DPT_LOC.csv")
L_DPT$Level = "Contamination - Low"
L_DPT$Type = "Produce Testing - Daily"
L_FPT<-read.csv(file = "Data/Detection_Rates_Low_FPT_LOC.csv")
L_FPT$Level = "Contamination - Low"
L_FPT$Type = "Produce Testing 1 sample - End"
L_FPT_10s<-read.csv(file = "Data/Detection_Rates_Low_10s_FPT_LOC.csv")
L_FPT_10s$Level = "Contamination - Low"
L_FPT_10s$Type = "Produce Testing 10 samples - End"
L_FPT_45s<-read.csv(file = "Data/Detection_Rates_Low_45s_FPT_LOC.csv")
L_FPT_45s$Level = "Contamination - Low"
L_FPT_45s$Type = "Produce Testing 45 samples - End"
Detection_Rates_Binded = rbind(H_DPT,H_FPT,L_DPT,L_FPT,L_FPT_10s,H_FPT_10s,L_FPT_45s,H_FPT_45s)
Detection_Rates_Binded<-Detection_Rates_Binded[,-1]
Detection_Rates_Binded$Cluster<-round(Detection_Rates_Binded$Cluster,1)
Detection_Rates_Binded$Cluster<-as.factor(Detection_Rates_Binded$Cluster)
Detection_Rates_Binded
View(Detection_Rates_Binded)
write.csv(Detection_Rates_Binded,file = "Data/DetectionRatesBinded.csv")
