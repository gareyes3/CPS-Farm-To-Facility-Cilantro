Time_Temp_Creation<-function(Total_Time, Interval, Initial_Temperature, Final_Temperature){
Time_Temp_df<-data.frame("min"= seq(0,Total_Time,by = Interval),
"means"  = seq(Initial_Temperature,Final_Temperature, by = ((Final_Temperature - Initial_Temperature)/(length(seq(0,Total_Time,by = Interval)) - 1) )))
}
#Not in use, function to create a data frame based on interval and initial and final temperature
Time_Temp_Creation<-function(Total_Time, Interval, Initial_Temperature, Final_Temperature){
Time_Temp_df<-data.frame("min"= seq(0,Total_Time,by = Interval),
"means"  = seq(Initial_Temperature,Final_Temperature, by = ((Final_Temperature - Initial_Temperature)/(length(seq(0,Total_Time,by = Interval)) - 1) )))
}
#This function calculates thee growth based on a time and temperature profile for 1 specific milk with R100084 P Paoae
Func_Growth_LagCon<-function(In_Lag_Consumed, Time_Temp_df,Interval){
#In_Lag_Consumed= Total lag time consumed
#Time_Temp_df = dataframe with time and temperature conditions
#Interval = time interval in the time_temp_df in hrs.
Total_Lag_Consumed = In_Lag_Consumed
Total_Growth = 0
old_lag = 0
NMax = 8.14
old_mumax = 0.083558
for (i in 1:nrow(Time_Temp_df)){
if (Total_Lag_Consumed <1 && old_lag!=0){
Lag_t_interval<-new_lag_time(newTemp = Time_Temp_df$tempM[i], oldLag = old_lag)
Lag_Consumed<-Interval/Lag_t_interval
Total_Lag_Consumed<-Total_Lag_Consumed+Lag_Consumed
Growth = 0
} else if (Total_Lag_Consumed>=1 | old_lag == 0){
Growth = ((new_growth_rate(newTemp = Time_Temp_df$tempM[i], oldMu = old_mumax))/2.303)*0.684 #Converted log10 from log ln
Total_Growth = Total_Growth + (Growth*Interval)
}
}
return(c(Total_Growth,Total_Lag_Consumed))
}
#Function for growth and lag phase
new_growth_rate<-function(newTemp, oldMu,oldTemp = 6, T0 = -4.15){
newMu<-((newTemp-T0)/(oldTemp-T0))* oldMu
return (newMu)
}
#Calculation of the new lag time.
new_lag_time <- function (newTemp, oldLag, oldTemp = 6, T0 = -4.15) {
numerator <- oldTemp -T0
denom <- newTemp - T0
newLag <- ( (numerator / denom)^2) * oldLag
return(newLag)
}
Time_Temp_Creation(Total_Time = 120*60, Interval = 1/60, Initial_Temperature = 4.5, Final_Temperature= 4.5)
Time_Temp_Df<-Time_Temp_Creation(Total_Time = 120*60, Interval = 1/60, Initial_Temperature = 4.5, Final_Temperature= 4.5)
View(Time_Temp_Df)
Func_Growth_LagCon(In_Lag_Consumed =0, Time_Temp_df= Time_Temp_Df,Interval =1/60)
#Not in use, function to create a data frame based on interval and initial and final temperature
Time_Temp_Creation<-function(Total_Time, Interval, Initial_Temperature, Final_Temperature){
Time_Temp_df<-data.frame("min"= seq(0,Total_Time,by = Interval),
"tempM"  = seq(Initial_Temperature,Final_Temperature, by = ((Final_Temperature - Initial_Temperature)/(length(seq(0,Total_Time,by = Interval)) - 1) )))
}
#This function calculates thee growth based on a time and temperature profile for 1 specific milk with R100084 P Paoae
Func_Growth_LagCon<-function(In_Lag_Consumed, Time_Temp_df,Interval){
#In_Lag_Consumed= Total lag time consumed
#Time_Temp_df = dataframe with time and temperature conditions
#Interval = time interval in the time_temp_df in hrs.
Total_Lag_Consumed = In_Lag_Consumed
Total_Growth = 0
old_lag = 0
NMax = 8.14
old_mumax = 0.083558
for (i in 1:nrow(Time_Temp_df)){
if (Total_Lag_Consumed <1 && old_lag!=0){
Lag_t_interval<-new_lag_time(newTemp = Time_Temp_df$tempM[i], oldLag = old_lag)
Lag_Consumed<-Interval/Lag_t_interval
Total_Lag_Consumed<-Total_Lag_Consumed+Lag_Consumed
Growth = 0
} else if (Total_Lag_Consumed>=1 | old_lag == 0){
Growth = ((new_growth_rate(newTemp = Time_Temp_df$tempM[i], oldMu = old_mumax))/2.303)*0.684 #Converted log10 from log ln
Total_Growth = Total_Growth + (Growth*Interval)
}
}
return(c(Total_Growth,Total_Lag_Consumed))
}
Time_Temp_Df<-Time_Temp_Creation(Total_Time = 120*60, Interval = 1/60, Initial_Temperature = 4.5, Final_Temperature= 4.5)
Func_Growth_LagCon(In_Lag_Consumed =0, Time_Temp_df= Time_Temp_Df,Interval =1/60)
#Buchanan spoilage function
Spoilage_Function<-function(Milkdf,Time_Temp_df){
for(i in 1:nrow(Milkdf)){
In_Lag_Consumed<-Milkdf$LagCon[i] #selecting lag for specific milk
ST_Iter<-Milkdf$Species[i] #selecting the ST of interest
Pop_Max<-look_for_st(st= ST_Iter,par_of_int = "Nmax") #Population max for given ST
Interval <- 1/60 #Interval in hours. means 0.01666 hours. maybe need is an input?
#this function provides two outputs, the total growth, and the new updated lag phase consumed.
Output_Milk<-Func_Growth_LagCon(In_Lag_Consumed = In_Lag_Consumed ,Time_Temp_df = Time_Temp_df,ST_Iter = ST_Iter,Interval = Interval)
#updating the total lag consumed
Milkdf$LagCon[i]<-Output_Milk[2]
#Updating the spoilage contamination of milk
Milkdf$SpoilageCon[i]<-Output_Milk[1]+Milkdf$SpoilageCon[i]
#Updating, that is Pop max is reached, then the current population is at population max.
if(Milkdf$SpoilageCon[i]>Pop_Max){
Milkdf$SpoilageCon[i]<-Pop_Max
}
}
#Returns the updated milk data frame
return(Milkdf)
}
#Buchanan spoilage function
Spoilage_Function_Single_Milk<-function(Cont, Pop_Max, Time_Temp_df, Interval =1/60){
Lag_Consumed = 0
for (i in 1:nrow(Time_Temp_df)){
#this function provides two outputs, the total growth, and the new updated lag phase consumed.
Output_Milk<-Func_Growth_LagCon(In_Lag_Consumed = In_Lag_Consumed ,Time_Temp_df = Time_Temp_df,Interval = Interval)
Lag_Consumed = Output_Milk[2]
Cont<-Output_Milk[1]+Cont
if(Milkdf$SpoilageCon[i]>Pop_Max){
Milkdf$SpoilageCon[i]<-Pop_Max
}
}
return (Cont)
}
#Buchanan spoilage function
Spoilage_Function_Single_Milk<-function(Cont, Pop_Max, Time_Temp_df, Interval =1/60){
Lag_Consumed = 0
for (i in 1:nrow(Time_Temp_df)){
#this function provides two outputs, the total growth, and the new updated lag phase consumed.
Output_Milk<-Func_Growth_LagCon(In_Lag_Consumed = In_Lag_Consumed ,Time_Temp_df = Time_Temp_df,Interval = Interval)
Lag_Consumed = Output_Milk[2]
Cont<-Output_Milk[1]+Cont
if(Milkdf$SpoilageCon[i]>Pop_Max){
Milkdf$SpoilageCon[i]<-Pop_Max
}
}
return (Cont)
}
Spoilage_Function_Single_Milk<-c(Cont = 2, Pop_Max =8.14, Time_Temp_df = Time_Temp_Df, Interval =1/60)
#Buchanan spoilage function
Spoilage_Function_Single_Milk<-function(Cont, Pop_Max, Time_Temp_df, Interval =1/60){
Lag_Consumed = 0
for (i in 1:nrow(Time_Temp_df)){
#this function provides two outputs, the total growth, and the new updated lag phase consumed.
Output_Milk<-Func_Growth_LagCon(In_Lag_Consumed = In_Lag_Consumed ,Time_Temp_df = Time_Temp_df,Interval = Interval)
Lag_Consumed = Output_Milk[2]
Cont<-Output_Milk[1]+Cont
if(Milkdf$SpoilageCon[i]>Pop_Max){
Milkdf$SpoilageCon[i]<-Pop_Max
}
}
return (Cont)
}
Time_Temp_Df<-Time_Temp_Creation(Total_Time = 120*60, Interval = 1/60, Initial_Temperature = 4.5, Final_Temperature= 4.5)
Spoilage_Function_Single_Milk<-c(Cont = 2, Pop_Max =8.14, Time_Temp_df = Time_Temp_Df, Interval =1/60)
#Buchanan spoilage function
Spoilage_Function_Single_Milk<-function(Cont, Pop_Max, Time_Temp_df, Interval =1/60){
Lag_Consumed = 0
for (i in 1:nrow(Time_Temp_df)){
#this function provides two outputs, the total growth, and the new updated lag phase consumed.
Output_Milk<-Func_Growth_LagCon(In_Lag_Consumed = In_Lag_Consumed ,Time_Temp_df = Time_Temp_df,Interval = Interval)
Lag_Consumed = Output_Milk[2]
Cont<-Output_Milk[1]+Cont
if( Cont>Pop_Max){
Cont = Pop_Max
}
}
return (Cont)
}
Time_Temp_Df<-Time_Temp_Creation(Total_Time = 120*60, Interval = 1/60, Initial_Temperature = 4.5, Final_Temperature= 4.5)
Spoilage_Function_Single_Milk<-c(Cont = 2, Pop_Max =8.14, Time_Temp_df = Time_Temp_Df, Interval =1/60)
#Buchanan spoilage function
Spoilage_Function_Single_Milk<-function(Cont, Pop_Max, Time_Temp_df, Interval =1/60){
Lag_Consumed = 0
for (i in 1:nrow(Time_Temp_df)){
#this function provides two outputs, the total growth, and the new updated lag phase consumed.
Output_Milk<-Func_Growth_LagCon(In_Lag_Consumed = In_Lag_Consumed ,Time_Temp_df = Time_Temp_df,Interval = Interval)
Lag_Consumed = Output_Milk[2]
Cont<-Output_Milk[1]+Cont
if( Cont>Pop_Max){
Cont = Pop_Max
}
}
return (Cont)
}
Time_Temp_Df<-Time_Temp_Creation(Total_Time = 120*60, Interval = 1/60, Initial_Temperature = 4.5, Final_Temperature= 4.5)
Spoilage_Function_Single_Milk(Cont = 2, Pop_Max =8.14, Time_Temp_df = Time_Temp_Df, Interval =1/60)
#Buchanan spoilage function
Spoilage_Function_Single_Milk<-function(Cont, Pop_Max, Time_Temp_df, Interval =1/60){
Lag_Consumed = 0
for (i in 1:nrow(Time_Temp_df)){
#this function provides two outputs, the total growth, and the new updated lag phase consumed.
Output_Milk<-Func_Growth_LagCon(In_Lag_Consumed = Lag_Consumed ,Time_Temp_df = Time_Temp_df,Interval = Interval)
Lag_Consumed = Output_Milk[2]
Cont<-Output_Milk[1]+Cont
if( Cont>Pop_Max){
Cont = Pop_Max
}
}
return (Cont)
}
Time_Temp_Df<-Time_Temp_Creation(Total_Time = 120*60, Interval = 1/60, Initial_Temperature = 4.5, Final_Temperature= 4.5)
Spoilage_Function_Single_Milk(Cont = 2, Pop_Max =8.14, Time_Temp_df = Time_Temp_Df, Interval =1/60)
Time_Temp_Df<-Time_Temp_Creation(Total_Time = 120*60, Interval = 1, Initial_Temperature = 4.5, Final_Temperature= 4.5)
View(Time_Temp_Df)
Time_Temp_Df<-Time_Temp_Creation(Total_Time = 120*60, Interval = 1, Initial_Temperature = 4.5, Final_Temperature= 4.5)
Spoilage_Function_Single_Milk(Cont = 2, Pop_Max =8.14, Time_Temp_df = Time_Temp_Df, Interval =1/60)
#Buchanan spoilage function
Spoilage_Function_Single_Milk<-function(Cont, Pop_Max, Time_Temp_df, Interval =1/60){
Lag_Consumed = 0
#this function provides two outputs, the total growth, and the new updated lag phase consumed.
Output_Milk<-Func_Growth_LagCon(In_Lag_Consumed = Lag_Consumed ,Time_Temp_df = Time_Temp_df,Interval = Interval)
Lag_Consumed = Output_Milk[2]
Cont<-Output_Milk[1]+Cont
if( Cont>Pop_Max){
Cont = Pop_Max
}
return (Cont)
}
Time_Temp_Df<-Time_Temp_Creation(Total_Time = 120*60, Interval = 1, Initial_Temperature = 4.5, Final_Temperature= 4.5)
Spoilage_Function_Single_Milk(Cont = 2, Pop_Max =8.14, Time_Temp_df = Time_Temp_Df, Interval =1/60)
Spoilage_Function_Single_Milk(Cont = 2.31, Pop_Max =8.14, Time_Temp_df = Time_Temp_Df, Interval =1/60)
Spoilage_Function_Single_Milk(Cont = 2.5, Pop_Max =8.14, Time_Temp_df = Time_Temp_Df, Interval =1/60)
#This function calculates thee growth based on a time and temperature profile for 1 specific milk with R100084 P Paoae
Func_Growth_LagCon<-function(In_Lag_Consumed, Time_Temp_df,Interval){
#In_Lag_Consumed= Total lag time consumed
#Time_Temp_df = dataframe with time and temperature conditions
#Interval = time interval in the time_temp_df in hrs.
Total_Lag_Consumed = In_Lag_Consumed
Total_Growth = 0
old_lag = 0
NMax = 8.14
old_mumax = 0.083508
for (i in 1:nrow(Time_Temp_df)){
if (Total_Lag_Consumed <1 && old_lag!=0){
Lag_t_interval<-new_lag_time(newTemp = Time_Temp_df$tempM[i], oldLag = old_lag)
Lag_Consumed<-Interval/Lag_t_interval
Total_Lag_Consumed<-Total_Lag_Consumed+Lag_Consumed
Growth = 0
} else if (Total_Lag_Consumed>=1 | old_lag == 0){
Growth = ((new_growth_rate(newTemp = Time_Temp_df$tempM[i], oldMu = old_mumax))/2.303)*0.684 #Converted log10 from log ln
Total_Growth = Total_Growth + (Growth*Interval)
}
}
return(c(Total_Growth,Total_Lag_Consumed))
}
Time_Temp_Df<-Time_Temp_Creation(Total_Time = 120*60, Interval = 1, Initial_Temperature = 4.5, Final_Temperature= 4.5)
Spoilage_Function_Single_Milk(Cont = 2.5, Pop_Max =8.14, Time_Temp_df = Time_Temp_Df, Interval =1/60)
Spoilage_Function_Single_Milk(Cont = 2.5, Pop_Max =8.14, Time_Temp_df = Time_Temp_Df, Interval =1/60)
Time_Temp_Df<-Time_Temp_Creation(Total_Time = 120*60, Interval = 1, Initial_Temperature = 4.5, Final_Temperature= 4.5)
Spoilage_Function_Single_Milk(Cont = 2.5, Pop_Max =8.14, Time_Temp_df = Time_Temp_Df, Interval =1/60)
Time_Temp_Creation_Var<-function(Total_Time, Interval, Mean_Temperature, SD_Temperature){
Time_Temp_df<-data.frame("min"= seq(0,Total_Time,by = Interval),
"tempM"  = rnorm(n =Total_Time, mean = Mean_Temperature,SD_Temperature))
}
Time_Temp_Df<Time_Temp_Creation_Var(Total_Time = 120*60, Interval = 1,Mean_Temperature = 4.36,SD_Temperature = 0.1591)
Time_Temp_df<-data.frame("min"= seq(0,Total_Time,by = Interval),
"tempM"  = rnorm(n =Total_Time-1, mean = Mean_Temperature,SD_Temperature))
Time_Temp_Creation_Var<-function(Total_Time, Interval, Mean_Temperature, SD_Temperature){
Time_Temp_df<-data.frame("min"= seq(0,Total_Time,by = Interval),
"tempM"  = rnorm(n =Total_Time-1, mean = Mean_Temperature,SD_Temperature))
}
Time_Temp_Df<Time_Temp_Creation_Var(Total_Time = 120*60, Interval = 1,Mean_Temperature = 4.36,SD_Temperature = 0.1591)
Time_Temp_df<-data.frame("min"= seq(0,Total_Time,by = Interval),
"tempM"  = rnorm(n =Total_Time+1, mean = Mean_Temperature,SD_Temperature))
Time_Temp_Creation_Var<-function(Total_Time, Interval, Mean_Temperature, SD_Temperature){
Time_Temp_df<-data.frame("min"= seq(0,Total_Time,by = Interval),
"tempM"  = rnorm(n =Total_Time+1, mean = Mean_Temperature,SD_Temperature))
}
Time_Temp_Df<Time_Temp_Creation_Var(Total_Time = 120*60, Interval = 1,Mean_Temperature = 4.36,SD_Temperature = 0.1591)
Time_Temp_Df<Time_Temp_Creation_Var(Total_Time = 120*60, Interval = 1,Mean_Temperature = 4.36,SD_Temperature = 0.1591)
View(Time_Temp_Df)
Time_Temp_Creation_Var<-function(Total_Time, Interval, Mean_Temperature, SD_Temperature){
Time_Temp_df<-data.frame("min"= seq(0,Total_Time,by = Interval),
"tempM"  = rnorm(n =Total_Time+1, mean = Mean_Temperature,SD_Temperature))
return (Time_Temp_df)
}
Time_Temp_Df<Time_Temp_Creation_Var(Total_Time = 120*60, Interval = 1,Mean_Temperature = 4.36,SD_Temperature = 0.1591)
Time_Temp_Creation_Var<-function(Total_Time, Interval, Mean_Temperature, SD_Temperature){
Time_Temp_df<-data.frame("min"= seq(0,Total_Time,by = Interval),
"tempM"  = rnorm(n =Total_Time+1, mean = Mean_Temperature, sd= SD_Temperature))
return (Time_Temp_df)
}
Time_Temp_Df<Time_Temp_Creation_Var(Total_Time = 120*60, Interval = 1,Mean_Temperature = 4.36,SD_Temperature = 0.1591)
Time_Temp_Df<-Time_Temp_Creation_Var(Total_Time = 120*60, Interval = 1,Mean_Temperature = 4.36,SD_Temperature = 0.1591)
Spoilage_Function_Single_Milk(Cont = 2.5, Pop_Max =8.14, Time_Temp_df = Time_Temp_Df, Interval =1/60)
Spoilage_Function_Single_Milk(Cont = 2.55, Pop_Max =8.14, Time_Temp_df = Time_Temp_Df, Interval =1/60)
Spoilage_Function_Single_Milk(Cont = 2.44, Pop_Max =8.14, Time_Temp_df = Time_Temp_Df, Interval =1/60)
Time_Temp_Df<-Time_Temp_Creation_Var(Total_Time = 24*60, Interval = 1,Mean_Temperature = 4.36,SD_Temperature = 0.1591)
Spoilage_Function_Single_Milk(Cont = 2.44, Pop_Max =8.14, Time_Temp_df = Time_Temp_Df, Interval =1/60)
Time_Temp_Df<-Time_Temp_Creation_Var(Total_Time = 48*60, Interval = 1,Mean_Temperature = 4.36,SD_Temperature = 0.1591)
Spoilage_Function_Single_Milk(Cont = 2.44, Pop_Max =8.14, Time_Temp_df = Time_Temp_Df, Interval =1/60)
Time_Temp_Df<-Time_Temp_Creation_Var(Total_Time = 72*60, Interval = 1,Mean_Temperature = 4.36,SD_Temperature = 0.1591)
Spoilage_Function_Single_Milk(Cont = 2.44, Pop_Max =8.14, Time_Temp_df = Time_Temp_Df, Interval =1/60)
Time_Temp_Df<-Time_Temp_Creation_Var(Total_Time = 96*60, Interval = 1,Mean_Temperature = 4.36,SD_Temperature = 0.1591)
Spoilage_Function_Single_Milk(Cont = 2.44, Pop_Max =8.14, Time_Temp_df = Time_Temp_Df, Interval =1/60)
Time_Temp_Df<-Time_Temp_Creation_Var(Total_Time = 96*60, Interval = 1,Mean_Temperature = 4.36,SD_Temperature = 0.1591)
Time_Temp_Df<-Time_Temp_Creation_Var(Total_Time = 96*60, Interval = 1,Mean_Temperature = 4.36,SD_Temperature = 0.1591)
Spoilage_Function_Single_Milk(Cont = 2.44, Pop_Max =8.14, Time_Temp_df = Time_Temp_Df, Interval =1/60)
library(glmnet)
#water testing
TD_W<-read_csv("Data/Water_Testing_Data.csv")
#TD_W$Results<-as.factor(TD_W$Results)
TD_W<-TD_W[,2:3]
model_w2<-glmnet(TD_W$Cont,TD_W$Results, family= "binomial" )
#water testing
TD_W<-read_csv("Data/Water_Testing_Data.csv")
#TD_W$Results<-as.factor(TD_W$Results)
TD_W<-TD_W[,2:3]
setwd("~/GitHub/CPS-Farm-To-Facility-Cilantro")
#water testing
TD_W<-read_csv("Data/Water_Testing_Data.csv")
#TD_W$Results<-as.factor(TD_W$Results)
TD_W<-TD_W[,2:3]
model_w2<-glmnet(TD_W$Cont,TD_W$Results, family= "binomial" )
?glmnet
enetFit <- train(Results~Cont, data = TD_W,
method = "glmnet",
trControl=trctrl,
# alpha and lambda paramters to try
tuneGrid = data.frame(alpha=0.5,
lambda=seq(0.1,0.7,0.05)))
glmnet(TD_W$Cont,TD_W$Results, family= "binomial" )
df$ones <- rep(1, nrow(df))
TD_W$Ones <- rep(1, nrow(TD_W))
View(TD_W)
glmnet(TD_W[,c(1,3)],TD_W$Results, family= "binomial" )
mod<-glmnet(TD_W[,c(1,3)],TD_W$Results, family= "binomial" )
mod
summary(mod)
coef(mod)
coef(mod,s = 0.1)
coef(mod,s = "lambda.min")
coef(mod,s = mod$lambda.min)
mod$lambda.min
mod$lambda
which.min(mod$lambda)
coef(mod)
coef(mod)[100]
mod<-glmnet(TD_W[,c(1,3)],TD_W$Results, family= "binomial" ,alpha=0, lambda=1)
mod
coef(mod)
mod<-glmnet(TD_W[,c(1,3)],TD_W$Results, family= "binomial" )
coef(mod)
model_W
TD_W<-read_csv("Data/Water_Testing_Data.csv")
#TD_W$Results<-as.factor(TD_W$Results)
TD_W<-TD_W[,2:3]
model_W<-glm(Results~Cont, data = TD_W,family = binomial(link = "logit"))
model_W
?glm
model_W
mod<-glmnet(TD_W[,c(1,3)],TD_W$Results, family= "binomial" )
which.min(mod$lambda)
coef(mod)
mod<-glmnet(TD_W[,c(1,3)],TD_W$Results, family= "binomial",nlambda = 1000 )
mod<-glmnet(TD_W[,c(1,3)],TD_W$Results, family= "binomial",nlambda = 1000 )
mod
coef(mod)
mod<-glmnet(TD_W[,c(1,3)],TD_W$Results, family= "binomial",nlambda = 1000 )
which.min(mod$lambda)
mod<-glmnet(TD_W[,c(1,3)],TD_W$Results, family= "binomial",nlambda = 1000 )
#water testing
TD_W<-read_csv("Data/Water_Testing_Data.csv")
#TD_W$Results<-as.factor(TD_W$Results)
TD_W<-TD_W[,2:3]
TD_W$Ones <- rep(1, nrow(TD_W))
mod<-glmnet(TD_W[,c(1,3)],TD_W$Results, family= "binomial",nlambda = 1000)
coef(mod)
which.min(mod$lambda)
coef(mod)[890]
coef(mod)[,890]
coef(mod)[,720]
coef(mod)[,740]
coef(mod)[,730]
coef(mod)[,735]
coef(mod)[,737]
coef(mod)[,739]
coef(mod)[,731]
coef(mod)[,733]
mod$lambda
plot(mod$lambda)
plot(mod$lambda)[733]
mod$lambda[733]
mod
mod[733]
mod$beta[733]
#water testing
TD_W<-read_csv("Data/Water_Testing_Data.csv")
#TD_W$Results<-as.factor(TD_W$Results)
TD_W<-TD_W[,2:3]
model_W<-glm(Results~Cont, data = TD_W,family = binomial(link = "logit"))
model_Wn<-glm(Results~1, data = TD_W,family = binomial(link = "logit"))
#water testing
TD_W<-read_csv("Data/Water_Testing_Data.csv")
#TD_W$Results<-as.factor(TD_W$Results)
TD_W<-TD_W[,2:3]
model_W<-glm(Results~Cont, data = TD_W,family = binomial(link = "logit"))
model_Wn<-glm(Results~1, data = TD_W,family = binomial(link = "logit"))
(exp(-19.8+3.424*6))/(1-exp(-19.8+3.424  *6))
(exp(-19.8+3.424*6))/(1-exp(-19.8+3.424*6))
(exp(-19.8+3.424*0))/(1-exp(-19.8+3.424*0))
(exp(-19.8+3.424*0))/(1+exp(-19.8+3.424*0))
(exp(-19.8+3.424*6))/(1+exp(-19.8+3.424*6))
(exp(-19.8+3.424*12))/(1+exp(-19.8+3.424*12))
(exp(-19.8+3.424*5))/(1+exp(-19.8+3.424*5))
(exp(-19.8+3.424*4))/(1+exp(-19.8+3.424*4))
TD<-read_csv("Data/Product_Testing_Data.csv")
TD<-TD[,2:3]
model<-glm(Results~Cont, data = TD,family = binomial(link = "logit"))
modeln<-glm(Results~1, data = TD,family = binomial(link = "logit"))
model
model_W
model_Wn<-glm(Results~1, data = TD_W,family = binomial(link = "logit"))
model_Wn
model_W
model_Wn
chisq.test(55,15)
NagelkerkeR2(model_W)
library(tidyverse)
library(pscl)
library(pROC)
library(ResourceSelection)
library(glmtoolbox)
library(fmsb)
library(glmnet)
anova(model_Wn, model_W, test = 'Chisq')
model_W<-glm(Results~Cont, data = TD_W,family = binomial(link = "logit"))
model_W<-glm(Results~Cont, data = TD_W,family = binomial(link = "logit"))
model_W
NagelkerkeR2(model_W)
anova(model_Wn, model_W, test = 'Chisq')
pchisq(15,2)
1-pchisq(15,2)
model_Wn<-glm(Results~1, data = TD_W,family = binomial(link = "logit"))
1-pchisq(15,41)
1-pchisq(15,41)
pchisq(15,41)
pchisq(55.820-15.276,41)
pchisq((55.820-15.276),41)
pchisq((55.820-15.276),40)
pchisq(45,40)
pchisq(45,2)
pchisq((55.820-15.276),3)
anova(model_Wn, model_W, test = 'Chisq')
pchisq((55.820-15.276),1)
pchisq(40.544,1)
TD<-read_csv("Data/Product_Testing_Data.csv")
model<-glm(Results~Cont, data = TD,family = binomial(link = "logit"))
modeln<-glm(Results~1, data = TD,family = binomial(link = "logit"))
anova(modeln, model, test = 'Chisq')
knitr::opts_chunk$set(echo = TRUE)
BS2 <- read.csv(file = "Baseline2.csv", header = TRUE )
BS2
BS2$Scenarios <- as.factor(BS2$Scenarios)
BS2$Scenarios2 <- as.factor(BS2$Scenarios2)
BS2$Relative_Efficacy <-as.numeric(BS2$Relative_Efficacy)
BS2
Fig2 <- ggplot(BS2, aes(fill=Contamination, x=Scenarios2, y=Relative_Efficacy)) +
geom_bar(position = "dodge", stat = "identity") +
labs(title="Contamination Frequency 2: Irrigation with contaminated water\n  once per season (random)", y="Relative Efficacy: Endpoint Oocyst", x="Sampling Scenario")
library(ggplot2)
Fig2 <- ggplot(BS2, aes(fill=Contamination, x=Scenarios2, y=Relative_Efficacy)) +
geom_bar(position = "dodge", stat = "identity") +
labs(title="Contamination Frequency 2: Irrigation with contaminated water\n  once per season (random)", y="Relative Efficacy: Endpoint Oocyst", x="Sampling Scenario")
Fig2 +
scale_fill_discrete(name = "Contamination \nLevel")+#(values=c("#FF3366","#99CCFF")) +
theme_bw()+
theme(plot.title = element_text(hjust = 0.5))+
#theme(axis.text.x = element_text(angle=45, vjust=1, hjust=1))+
coord_flip()+
theme(axis.text.x=element_text(size =12), axis.text.y=element_text(size =12),axis.title = element_text(size = 12))+
theme(legend.position=c(0.75, 0.70))
Fig2 +
scale_fill_discrete(name = "Contamination \nLevel")+#(values=c("#FF3366","#99CCFF")) +
theme_bw()+
theme(plot.title = element_text(hjust = 0.5))+
#theme(axis.text.x = element_text(angle=45, vjust=1, hjust=1))+
coord_flip()+
theme(axis.text.x=element_text(size =12), axis.text.y=element_text(size =12),axis.title = element_text(size = 12))
ggsave("Baseline2.jpg", width =7, height = 6, units = "in", dpi = 600)
library(ggplot2)
BS1 <- read.csv(file = "Baseline1.csv", header = TRUE )
BS1
BS1$Scenarios <- as.factor(BS1$Scenarios)
BS1$Scenarios2 <- as.factor(BS1$Scenarios2)
BS1$Relative_Efficacy <-as.numeric(BS1$Relative_Efficacy)
BS1
Fig1 <- ggplot(BS1, aes(fill=Contamination, x=Scenarios2, y=Relative_Efficacy)) +
geom_bar(position = "dodge", stat = "identity") +
labs(title="Contamination Frequency 1: Daily Irrigation with contaminated water", y="Relative Efficacy: Endpoint Oocyst", x="Sampling Scenario")
Fig1 +
scale_fill_discrete(name = "Contamination \nLevel")+#(values=c("#FF3366","#99CCFF")) +
theme_bw()+
theme(plot.title = element_text(hjust = 0.5))+
#theme(axis.text.x = element_text(angle=45, vjust=1, hjust=1))+
coord_flip()+
theme(axis.text.x=element_text(size =12), axis.text.y=element_text(size =12),axis.title = element_text(size = 12))
ggsave("Baseline1.jpg", width =7, height = 6, units = "in", dpi = 600)
library(faraway)
install.packages("faraway")
library(faraway)
seatpos
lm(hipcenter~.)
lm(hipcenter~., daya = seatpos)
lm(hipcenter~., data = seatpos)
Full_mod_1<-lm(hipcenter~., data = seatpos)
Full_mod_1
Full_mod_1<-lm(hipcenter~ Age + Weight + HtShoes + Ht + Seated + Arm + Thigh + Leg, data = seatpos)
Full_mod_1
summary(Full_mod_1)
vif(Full_mod_1)
RedVIF_mod_1<-lm(hipcenter~ Age + Weight+ Seated + Arm + Thigh + Leg, data = seatpos)
summary(Full_mod_1)
summary(RedVIF_mod_1)
vif(RedVIF_mod_1)
Coin_DF<-data.frame("Age" = c(1,2,3,4,5),
"Number" = c(123,78,32,17,24),
"Average_Weight" = c(7.9725,7.9503,7.9276,7.8962,7.8730),
"SD" = c(0.01409, 0.02272,0.03426,0.04057,0.05353))
lm(Average_Weight~Age, data= Coin_DF)
Coin_Model= lm(Average_Weight~Age, data= Coin_DF)
summary(Coin_Model)
